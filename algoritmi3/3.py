import heapq
class Канат:
    def __init__(self, длина, номер):
        self.длина = длина
        self.номер = номер

class Куча_канатов:
    def __init__(self):
        self._data = []

    def push(self, item):
        heapq.heappush(self._data, item)

    def pop(self):
        return heapq.heappop(self._data)

    def top(self):
        return self._data[0]

    def __len__(self):
        return len(self._data)

def связать_канаты(канаты):
    куча = Куча_канатов()
    for i, канат in enumerate(канаты):
        куча.push((канат.длина, канат.номер))

    порядок = []
    затраты = 0

    while len(куча) > 1:
        канат1 = куча.pop()
        канат2 = куча.pop()

        затраты_этой_итерации = канат1[0] + канат2[0]
        затраты += затраты_этой_итерации

        порядок.append((канат1[1], канат2[1]))
        новый_канат = Канат(затраты_этой_итерации, канат1[1])
        куча.push((затраты_этой_итерации, канат1[1]))

    return порядок, затраты

if __name__ == '__main__':
    канаты = [Канат(2, 0), Канат(5, 1), Канат(4, 2), Канат(7, 3), Канат(1, 4)]
    порядок, затраты = связать_канаты(канаты)
    print('Порядок связывания канатов:', порядок)
    print('Суммарные затраты:', затраты)
